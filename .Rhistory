load("~/GitHub/GBI6_ExamenFinal/.RData")
#pregunta 2.2
sets<-c('BRCA','KIPAN','KIRP','LUSC','OV','UCEC')
cancertype_boxplots<-lapply(sets,tcga_boxplots)
cancertype_boxplots[3]
tcga_boxplots<- function (x) {
st<-df_long[df_long$dataset==x,]
grafica=ggplot(st,aes(dataset,expresion_level)) +
geom_boxplot() + geom_jitter(alpha=0.2, size = 0.2)+
labs(x = "Genes",y = "Nivel de expresion",title="Nivel de expresion tipos de cancer")+
theme(plot.title = element_text(hjust = 0.5, size = 18, face = "bold"))
return(grafica)
}
#prueba
tcga_boxplots('KIPAN')
library("tidyverse")
library("tidyr")
#pregunta 1.5
library(dplyr)
#pregunta 1.6
#interpretacion
#pregunta 2.1
library("ggplot2")
tcga_boxplots<- function (x) {
st<-df_long[df_long$dataset==x,]
grafica=ggplot(st,aes(dataset,expresion_level)) +
geom_boxplot() + geom_jitter(alpha=0.2, size = 0.2)+
labs(x = "Genes",y = "Nivel de expresion",title="Nivel de expresion tipos de cancer")+
theme(plot.title = element_text(hjust = 0.5, size = 18, face = "bold"))
return(grafica)
}
#prueba
tcga_boxplots('KIPAN')
#pregunta 2.2
sets<-c('BRCA','KIPAN','KIRP','LUSC','OV','UCEC')
cancertype_boxplots<-lapply(sets,tcga_boxplots)
cancertype_boxplots[3]
View(cancertype_boxplots)
cancertype_boxplots[1]
cancertype_boxplots[3]
#pregunta 2.3
plot.new()
cancertype_boxplots[3]%>%ggsave("boxplot3.png",device="png",path="results",width=10, height=10)
#pregunta 2.3
plot.new()
cancertype_boxplots[3] %>% ggsave("boxplot3.png",device="png",path="results",width=10, height=10)
cancertype_boxplots[3]+ ggsave("boxplot3.png",device="png",path="results",width=10, height=10)
#pregunta 2.3
plot.new()
cancertype_boxplots[3]
ggsave("boxplot3.png",device="png",path="results",width=10, height=10)
ggsave("boxplot3.png",device="png",path="results",width=10, height=10,units='cm',dpi = 300)
getwd()
setwd("/Users/Manuela/Documents/GitHub/GBI6_ExamenFinal/")
ggsave("boxplot3.png",device="png",path="results",width=10, height=10,units='cm',dpi = 300)
tcga_boxplots<- function (x) {
st<-df_long[df_long$dataset==x,]
grafica=ggplot(st,aes(dataset,expresion_level)) +
geom_boxplot() + geom_jitter(alpha=0.2, size = 0.2)+
labs(x = "Tipo de cancer",y = "Expresion",title="Nivel de expresion tipos de cancer")+
theme(plot.title = element_text(hjust = 0.5, size = 18, face = "bold"))
return(grafica)
}
#pregunta 2.2
sets<-c('BRCA','KIPAN','KIRP','LUSC','OV','UCEC')
cancertype_boxplots<-lapply(sets,tcga_boxplots)
#pregunta 2.3
plot.new()
cancertype_boxplots[3]
ggsave("boxplot3.png",device="png",path="results",width=20, height=20,units='cm',dpi = 300)
tcga_boxplots<- function (x) {
st<-df_long[df_long$dataset==x,]
grafica=ggplot(st,aes(dataset,expresion_level)) +
geom_boxplot() + geom_jitter(alpha=0.2, size = 1)+
labs(x = "Tipo de cancer",y = "Expresion",title="Nivel de expresion tipos de cancer")+
theme(plot.title = element_text(hjust = 0.5, size = 18, face = "bold"))
return(grafica)
}
#pregunta 2.2
sets<-c('BRCA','KIPAN','KIRP','LUSC','OV','UCEC')
cancertype_boxplots<-lapply(sets,tcga_boxplots)
#pregunta 2.3
plot.new()
cancertype_boxplots[3]
ggsave("boxplot3.png",device="png",path="results",width=20, height=20,units='cm',dpi = 300)
grafica=ggplot(st,aes(dataset,expresion_level)) +
geom_boxplot() + geom_jitter()+
labs(x = "Tipo de cancer",y = "Expresion",title="Nivel de expresion tipos de cancer")+
theme(plot.title = element_text(hjust = 0.5, size = 18, face = "bold"))
View(tcga_boxplots)
tcga_boxplots<- function (x) {
st<-df_long[df_long$dataset==x,]
grafica=ggplot(st,aes(dataset,expresion_level)) +
geom_boxplot() + geom_jitter(alpha=0.2, size = 0.2)+
labs(x = "Tipo de cancer",y = "Expresion",title="Nivel de expresion tipos de cancer")+
theme(plot.title = element_text(hjust = 0.5, size = 18, face = "bold"))
return(grafica)
}
tcga_boxplots<- function (x) {
st<-df_long[df_long$dataset==x,]
grafica=ggplot(st,aes(dataset,expresion_level)) +
geom_boxplot() + geom_jitter()+
labs(x = "Tipo de cancer",y = "Expresion",title="Nivel de expresion tipos de cancer")+
theme(plot.title = element_text(hjust = 0.5, size = 18, face = "bold"))
return(grafica)
}#alpha=0.2, size = 0.2
#pregunta 2.2
sets<-c('BRCA','KIPAN','KIRP','LUSC','OV','UCEC')
cancertype_boxplots<-lapply(sets,tcga_boxplots)
#pregunta 2.3
plot.new()
#pregunta 2.3
plot.new()
cancertype_boxplots[3]
ggsave("boxplot3.png",device="png",path="results",width=20, height=20,units='cm',dpi = 300)
View(doble_genes)
doble_genes[1]
###prueba
ggplot(data=df,aes(x='GATA3',y='PTEN'))+geom_point()
###prueba
ggplot(data=df,aes(x=GATA3,y=PTEN))+geom_point()
g2<- c(GATA3,PTEN,XBP1,ESR1,MUC1,FN1,GAPDH)
ggplot(df)
ggplot(df,GATA3,PTEN)
#pregunta 2.5
genes<- c('GATA3','PTEN','XBP1','ESR1','MUC1','FN1','GAPDH')
f_genes=factor(genes)
par_genes<-combn(f_genes,m=2,simplify=F)
par_genes
par_genes[1]
ggplot(df,GATA3,PTEN)
f_genes
f_genes[1]
par_genes[1]
pares<-c(1:7)
elem<-c(1:7)
pares<-combn(elem,m=2,simplify=F)
elem<-c(1:7)
pares<-combn(elem,m=2,simplify=F)
pares[1]
separate(pares[1],' ')
pares[1]
pares
pares<-combn(f_genes,m=2,simplify=F)
View(pares)
pares
pares[1]
extract(pares[1],1,into=NA)
pares[1][/./]
View(pares)
View(pares)
View(pares)
#pregunta 2.4
#reg_gen_expression<- function(G) {
elem<-c(1:7)
pares<-combn(elem,m=2,simplify=F)
tipe(pares)
type(pares)
#pregunta 2.4
#reg_gen_expression<- function(G) {
elem<-c(1:7)
pares<-combn(elem,m=2,simplify=F)
df_par=data.frame(t(sapply(pares,c)))
View(df_par)
#for i in df_par
a<-df_par$X1[1]
b<-df_par$X2[1]
a
b
fa<-factor(a)
fa
#pregunta 2.4
reg_gen_expression<- function(G) {
elem<-c(1:7)
pares<-combn(elem,m=2,simplify=F)
df_par=data.frame(t(sapply(pares,c)))
for (i in df_par){
a<-df_par$X1[i]
b<-df_par$X2[i]
}
puntos=ggplot(data=df,aes(x=factor(G[a]),y=factor(G[b])))+geom_point()
return(puntos)
}
View(reg_gen_expression)
#pregunta 2.5
genes<- c('GATA3','PTEN','XBP1','ESR1','MUC1','FN1','GAPDH')
reg_gen_expression(genes)
library(ggplot2)
reg_gen_expression(genes)
#pregunta 2.4
genes<- c('GATA3','PTEN','XBP1','ESR1','MUC1','FN1','GAPDH')
reg_gen_expression<- function() {
elem<-c(1:7)
pares<-combn(elem,m=2,simplify=F)
df_par=data.frame(t(sapply(pares,c)))
for (i in df_par){
a<-df_par$X1[i]
b<-df_par$X2[i]
}
puntos=ggplot(data=df,aes(x=factor(genes[a]),y=factor(genes[b])))+geom_point()
return(puntos)
}
reg_gen_expression()
c=df_par$X1[1]
c
c=df_par$X1[1,]
a+b
c=as.numeric(df_par$X1[1])
c
genes[c]
t=factor(genes[c])
t
reg_gen_expression<- function() {
elem<-c(1:7)
pares<-combn(elem,m=2,simplify=F)
df_par=data.frame(t(sapply(pares,c)))
for (i in df_par){
a<-as.numeric(df_par$X1[i])
b<-as.numeric(df_par$X2[i])
}
puntos=ggplot(data=df,aes(x=factor(G[a]),y=factor(G[b])))+geom_point()
return(puntos)
}
#pregunta 2.5
genes<- c('GATA3','PTEN','XBP1','ESR1','MUC1','FN1','GAPDH')
reg_gen_expression(genes)
reg_gen_expression<- function(G) {
elem<-c(1:7)
pares<-combn(elem,m=2,simplify=F)
df_par=data.frame(t(sapply(pares,c)))
for (i in df_par){
a<-as.numeric(df_par$X1[i])
b<-as.numeric(df_par$X2[i])
}
puntos=ggplot(data=df,aes(x=factor(G[a]),y=factor(G[b])))+geom_point()
return(puntos)
}
#pregunta 2.5
genes<- c('GATA3','PTEN','XBP1','ESR1','MUC1','FN1','GAPDH')
reg_gen_expression(genes)
reg_genplots<-lapply(genes,reg_gen_expression)
reg_genplots<-lapply(genes,reg_gen_expression)
df_par[1]
df_par$X1[1]
df_par$X1[2]
df_par$X1[3]
reg_gen_expression<- function(G) {
elem<-c(1:7)#lista del 1 al 7
pares<-combn(elem,m=2,simplify=F)# combinaciones posibles de 7 elementos
df_par<-data.frame(t(sapply(pares,c)))#dataframe de la combinaciones
fila<-c(1:21)#total combinaciones
for (i in fila){
a<-as.numeric(df_par$X1[i])
b<-as.numeric(df_par$X2[i])
}
puntos=ggplot(data=df,aes(x=factor(G[a]),y=factor(G[b])))+geom_point()
return(puntos)
}
#pregunta 2.5
genes<- c('GATA3','PTEN','XBP1','ESR1','MUC1','FN1','GAPDH')
reg_gen_expression(genes)
return(genplot)
genplot<-ggplot(data=df,aes(x=gen1,y=gen2))+geom_point()
reg_gen_expression<- function(G) {
elem<-c(1:7)#lista del 1 al 7
pares<-combn(elem,m=2,simplify=F)# combinaciones posibles de 7 elementos
df_par<-data.frame(t(sapply(pares,c)))#dataframe de la combinaciones
fila<-c(1:21)#total combinaciones
for (i in fila){
a<-as.numeric(df_par$X1[i])
b<-as.numeric(df_par$X2[i])
gen1<-factor(G[a])
gen2<-factor(G[b])
ggplot(data=df,aes(x=gen1,y=gen2))+geom_point()
}
return()
}
#pregunta 2.5
genes<- c('GATA3','PTEN','XBP1','ESR1','MUC1','FN1','GAPDH')
reg_gen_expression(genes)
gep<-ggplot(data=df,aes(x=gen1,y=gen2))+geom_point()
reg_gen_expression(genes)
View(reg_genplots)
View(reg_gen_expression)
reg_gen_expression<- function(G) {
elem<-c(1:7)#lista del 1 al 7
pares<-combn(elem,m=2,simplify=F)# combinaciones posibles de 7 elementos
df_par<-data.frame(t(sapply(pares,c)))#dataframe de la combinaciones
fila<-c(1:21)#total combinaciones
for (i in fila){
a<-as.numeric(df_par$X1[i])
b<-as.numeric(df_par$X2[i])
gen1<-factor(G[a])
gen2<-factor(G[b])
gep<-ggplot(data=df,aes(x=gen1,y=gen2))+geom_point()
}
gep
}
View(reg_gen_expression)
reg_gen_expression(genes)
reg_gen_expression<- function(G) {
elem<-c(1:7)#lista del 1 al 7
pares<-combn(elem,m=2,simplify=F)# combinaciones posibles de 7 elementos
df_par<-data.frame(t(sapply(pares,c)))#dataframe de la combinaciones
fila<-c(1:21)#total combinaciones
for (i in fila){
a<-as.numeric(df_par$X1[i])
b<-as.numeric(df_par$X2[i])
gen1<-factor(G[a])
gen2<-factor(G[b])
gep<-ggplot(data=df,aes(gen1,gen2))+geom_point()
}
gep
}
reg_gen_expression(genes)
View(df)
ggplot(df,aes(GADPH,FN1))+geom_point()
ggplot(df,aes(GADPH,FN1))+geom_point()
ggplot(data=df,aes(x=GADPH,y=FN1))+geom_point()
ggplot(data=df,aes(df$GADPH,df$FN1))+geom_point()
ggplot(data=df,aes(x='GADPH',y='FN1'))+geom_point()
df
df[GATA3]
df[GATA3]
df[XBP1]
df_long[dataset]
df(GATA3)
dfGATA3_long[dataset]
library("tidyverse")
library("tidyr")
library(dplyr)
library("ggplot2")
library("tidyverse")
reg_gen_expression<- function(G) {
elem<-c(1:7)#lista del 1 al 7
pares<-combn(elem,m=2,simplify=F)# combinaciones posibles de 7 elementos
df_par<-data.frame(t(sapply(pares,c)))#dataframe de la combinaciones
fila<-c(1:21)#total combinaciones
for (i in fila){
a<-as.numeric(df_par$X1[i])
b<-as.numeric(df_par$X2[i])
gen1<-factor(G[a])
gen2<-factor(G[b])
gep<-ggplot(df,aes(gen1,gen2))+geom_point()
}
gep
}
#pregunta 2.5
genes<- c('GATA3','PTEN','XBP1','ESR1','MUC1','FN1','GAPDH')
reg_gen_expression(genes)
reg_genplots<-lapply(genes,reg_gen_expression)
reg_fun<- function (H){
gen1<-factor(H[1])
gen2<-factor(H[2])
figura=ggplot(df,aes(gen1,gen2))+geom_point()
return(figura)
}
reg_fun(c('GATA3','PTEN'))
ufo<-(c('GATA3','PTEN'))
ufo
ufo[1]
factor(ufo[1])
sup<-factor(ufo[1])
sup
df
df[sup]
head(df[sup])
sup<-factor(ufo[6])
sup
ufo<-(c('GATA3','PTEN'))
ufo<-c('GATA3','PTEN')
ufo
ufo[1]
sup<-factor(ufo[2])
sup
df
head(df[sup])
head(df[dataset])
head(df[1])
head(df[2])
head(df[3])
ufo[1]
reg_fun<- function (H){
figura=ggplot(df,H[1],H[2])+geom_point()
return(figura)
}
reg_fun(ufo)
figura=ggplot(df,aes(H[1],H[2]))+geom_point()
reg_fun<- function (H){
figura=ggplot(df,aes(H[1],H[2]))+geom_point()
return(figura)
}
reg_fun(ufo)
reg_fun<- function (H){
figura=ggplot(df,aes(H[1],H[2]))+geom_point()
return(figura)
}
reg_fun(ufo)
View(df_par)
View(doble_genes)
View(pares)
genes<- c('GATA3','PTEN','XBP1','ESR1','MUC1','FN1','GAPDH')
pares<-combn(genes,m=2,simplify=F)
pares[1]
pares[1][1]
df_pares<-data.frame(t(sapply(pares,c)))
View(df)
View(df_pares)
View(pares)
View(pares)
pares
unlist(pares)
lista=unlist(pares)
lista<-unlist(pares)
lista[1]
genes<- c('GATA3','PTEN','XBP1','ESR1','MUC1','FN1','GAPDH')
elem<-c(1:7)
pares<-combn(elem,m=2,simplify=F)
df_par<-data.frame(t(sapply(pares,c)))
View(df_par)
genes[1,2]
genes[[1,2]]
genes[[1][2]]
genes[[1],[2]]
genes[c(1,2)]
View(reg_genplots)
reg_genplots[1]
reg_genplots[3]
reg_gen_expression('GATA3','PTEN')
reg_gen_expression(c('GATA3','PTEN'))
reg_gen_expression<- function (gene){
figura=df%>%ggplot()+geom_point(aes(gene))
return(figura)
}
reg_gen_expression(c('GATA3','PTEN'))
View(gen_ex)
df>%> ggplot(aes(BRCA,GTA))+geom_point()
df%>% ggplot(aes(BRCA,GTA))+geom_point()
ggplot(df,aes(BRCA,GTA))+geom_point()
View(df_long)
ggplot(df,aes(GTA3,PTEN))+geom_point()
ggplot(df,aes(GATA3,PTEN))+geom_point()
View(df_par)
View(df_pares)
ggplot(df,aes(PTEN,GAPDH))+geom_point()
View(df_long)
ggplot(df,aes(PTEN,GAPDH))+geom_point()+
ggplot(df_long,aes(dataset,expression_level))+geom_smooth()
ggplot(df,aes(PTEN,GAPDH))+geom_point()+
geom_smooth(df_long,aes(dataset,expression_level))
geom_smooth(df_long,aes(dataset,expression_level))
ggplot(df_long,aes(dataset,expression_level))+geom_smooth()
ggplot(df_long,aes(dataset,expresion_level))+geom_smooth()
ggplot(df_long,aes(BRCA,expresion_level))+geom_smooth()
ggplot(df,aes(PTEN,GAPDH))+geom_point()
"bcr_patient_barcode"
cancer=df_long %>% pivot_wider(dataset)
cancer=df_long %>% pivot_wider(dataset,id_expand = TRUE,names_from = dataset,values_from =expresion_level)
rlang::last_error()
cancer=pivot_wider(df_long,dataset,id_expand = TRUE,names_from = dataset,values_from =expresion_level)
cancer=pivot_wider(data=df_long,id_cols=dataset,id_expand = TRUE,names_from = dataset,values_from =expresion_level)
cancer=pivot_wider(data=df_long,id_cols='dataset',id_expand=TRUE,names_from='dataset',values_from='expresion_level')
cancer=pivot_wider(df_long,id_cols='dataset',id_expand=TRUE,names_from='dataset',values_from='expresion_level')
cancer=pivot_wider(df_long,id_cols="dataset",id_expand=TRUE,names_from="dataset",values_from="expresion_level")
library(dplyr)
cancer=pivot_wider(df_long,id_cols="dataset",id_expand=TRUE,names_from="dataset",values_from="expresion_level")
cancer=df_long %<%pivot_wider(names_from=dataset,values_from=expresion_level)
cancer=df_long %<% pivot_wider(names_from=dataset,values_from=expresion_level)
library("tidyr")
library("tidyverse")
library("tidyverse")
library(sjmisc)
library(sjPlot)
library(dplyr)
cancer=df_long %<% pivot_wider(names_from=dataset,values_from=expresion_level)
library("ggplot2")
cancer=df_long %>% pivot_wider(names_from=dataset,values_from=expresion_level)
View(cancer)
datagen<-df_long %>%
dplyr::group_by(gen,dataset)
View(cancer)
View(datagen)
ggplot(df_long,aes(gen,expresion_level))+geom_smooth(method='lm', formula= y~x)
ggplot(df,aes(PTEN,GAPDH))+geom_point()+geom_smooth(method='lm', formula= y~x)
ggplot(df,aes('PTEN','GAPDH'))+geom_point()+geom_smooth(method='lm', formula= y~x)
ggplot(df,aes(factor('PTEN'),factor('GAPDH'))+geom_point()+geom_smooth(method='lm', formula= y~x)
ggplot(df,aes(PTEN,GAPDH)+geom_point()+geom_smooth(method='lm', formula= y~x)
ggplot(df,aes(PTEN,GAPDH)+geom_point()+geom_smooth(method='lm', formula= y~x)
new.plot()
new.plot()
plot.new()
ggplot(df,aes(PTEN,GAPDH)+geom_point()+geom_smooth(method='lm', formula= y~x)
ggplot(df,aes(PTEN,GAPDH))+geom_point()+geom_smooth(method='lm', formula= y~x)
ggplot(df,aes(PTEN,GAPDH))+geom_point()+geom_smooth(method='lm', formula= y~x)
can_ex<-function(gen1,gen2){
fig=ggplot(df,aes(gen1,gen2))+geom_point()+geom_smooth(method='lm', formula= y~x)
return=fig
}
can_ex(GATA3,PTEN)
View(df_pares)
df_pares
df_pares[1]
df_pares$X1[1]
match=c(df_pares$X1[1],df_pares$X2[1])
match
can_ex(match)
can_ex(df_pares$X1[1],df_pares$X2[1])
can_ex(GATA3,PTEN)
can_ex(GATA3,PTEN)
can_ex('GATA3','PTEN')
