#librerias
library("ggplot2")
library("dplyr")
library("tidyr")
library("tidyverse")
library("sjmisc")
library("sjPlot")
#pregunta 1.1
getwd() #comprobar directorio actual
setwd("/Users/Manuela/Documents/GitHub/GBI6_ExamenFinal/")#definir directorio actual
#pregunta 1.2
df<- read.csv("data/mRNA_expr.csv")
#pregunta 1.3
#definir funcion en base a un vector que contenga los argumentos
long_df <- function(a,b,c,d,e) {
y=a %>% pivot_longer(!c(b,c),names_to =d, values_to = e)
return(y)
}
#pregunta 1.4
df_long <- long_df(df,"bcr_patient_barcode","dataset","gen","expresion_level") %>% select(!(bcr_patient_barcode))
df_long %>%
group_by(dataset,gen)%>%
descr(out="viewer",file="results/mRNA_expr_summary.doc")
#pregunta 2.4
#genes<- c('GATA3','PTEN','XBP1','ESR1','MUC1','FN1','GAPDH')
#elem<-c(1:7)#lista del 1 al 7
#pares<-combn(elem,m=2,simplify=F)# combinaciones posibles de 7 elementos
reg_gen_expression<-function(gen1,gen2){
fig=ggplot(df,aes(gen1,gen2))+geom_point()+geom_smooth(method='lm', formula= y~x)
return(fig)
}
reg_gen_expression(GATA3,PTEN)
ggplot(df,aes(GATA3,PTEN))+geom_point()+geom_smooth(method='lm', formula= y~x)
#pregunta 2.4
genes<- c('GATA3','PTEN','XBP1','ESR1','MUC1','FN1','GAPDH')
pares<-combn(genes,m=2,simplify=F)
pares
#11 "PTEN"  "GAPDH"
ggplot(df,aes(PTEN,GAPDH))+geom_point()+geom_smooth(method='lm', formula= y~x)
ggsave("regresion11.pdf",device="pdf",path="results",width=20, height=20,units='cm',dpi = 300)
pares[11]
View(pares)
View(pares)
pares[[1]]
reg_gen_expression(GTA3,PTEN)
reg_gen_expression(GaTA3,PTEN)
reg_gen_expression(GATA3,PTEN)
